From d1d05e77bead0da8c6449c9753d606d2e5187632 Mon Sep 17 00:00:00 2001
From: Alexandre Jutras <alexandre.jutras@nxp.com>
Date: Wed, 3 Apr 2019 09:50:26 -0400
Subject: [PATCH] sdp-basic: Select heap using ID

Signed-off-by: Alexandre Jutras <alexandre.jutras@nxp.com>
---
 host/xtest/sdp_basic.c | 26 ++++++++++++++++++++++++--
 1 file changed, 24 insertions(+), 2 deletions(-)

diff --git a/host/xtest/sdp_basic.c b/host/xtest/sdp_basic.c
index e2f611e..66a1328 100644
--- a/host/xtest/sdp_basic.c
+++ b/host/xtest/sdp_basic.c
@@ -118,6 +118,8 @@ int allocate_ion_buffer(size_t size, int heap_type_id, int verbosity)
 	int fd = -1;
 	unsigned int idx;
 
+	printf("allocate_ion_buffer: Open ION device\n");
+
 	ion = open("/dev/ion", O_RDWR);
 	if (ion < 0) {
 		fprintf(stderr, "Error: failed to open /dev/ion\n");
@@ -128,15 +130,20 @@ int allocate_ion_buffer(size_t size, int heap_type_id, int verbosity)
 		return fd;
 	}
 
+	printf("allocate_ion_buffer: Validate heap ID\n");
+
 	if (heap_type_id < 0)
 		heap_type_id = DEFAULT_ION_HEAP_TYPE;
 
+	printf("allocate_ion_buffer: Query number of heaps\n");
 	memset(&query_data, 0, sizeof(query_data));
 	if (ioctl(ion, ION_IOC_HEAP_QUERY, &query_data) < 0) {
 		fprintf(stderr, "Error: failed to query the number of heaps\n");
 		goto out;
 	}
+	printf("allocate_ion_buffer: There are %u heaps\n", query_data.cnt);
 
+	printf("allocate_ion_buffer: Get heap data\n");
 	query_data.heaps = (__u64)(unsigned long)&heap_data;
 	if (ioctl(ion, ION_IOC_HEAP_QUERY, &query_data) < 0) {
 		fprintf(stderr, "Info: can't query heaps data, try old API\n");
@@ -144,16 +151,28 @@ int allocate_ion_buffer(size_t size, int heap_type_id, int verbosity)
 		goto out;
 	}
 
-	for (idx = 0; idx < query_data.cnt; idx++)
+#if 0
+	printf("allocate_ion_buffer: Find heap with proper type (%d)\n", heap_type_id);
+	for (idx = 0; idx < query_data.cnt; idx++) {
+		printf("allocate_ion_buffer: Heap %u (%s) has type (%u)\n", idx, heap_data[idx].name, heap_data[idx].type);
 		if (heap_data[idx].type == (unsigned int)heap_type_id)
 			break;
+	}
 	if (idx == query_data.cnt) {
 		fprintf(stderr, "Error: target heap type %d not found\n",
 				heap_type_id);
 		goto out;
 	}
+#else
+	if ((unsigned int)heap_type_id >= query_data.cnt) {
+		fprintf(stderr, "Error: Invalid heap ID (%d)\n", heap_type_id);
+		goto out;
+	}
+
+	idx = heap_type_id;
+#endif
 
-	verbose("Allocate in ION heap '%s' (type=%u, id=%u)\n",
+	printf("Allocate in ION heap '%s' (type=%u, id=%u)\n",
 		heap_data[idx].name, heap_data[idx].type,
 		heap_data[idx].heap_id);
 
@@ -165,8 +184,11 @@ int allocate_ion_buffer(size_t size, int heap_type_id, int verbosity)
 		goto out;
 	}
 
+	printf("allocate_ion_buffer: Done\n");
+
 	fd = alloc_data.fd;
 out:
+	printf("allocate_ion_buffer: Close ION device\n");
 	close(ion);
 	return fd;
 }
-- 
2.7.4

